Connecting different microservices of Node.js using Docker involves several steps. Here's a high-level overview to get you started:

### 1. **Set Up Your Development Environment**
- **Install Node.js**: Download and install Node.js from the [official website](https://nodejs.org/).
- **Install Docker**: Download and install Docker from the [Docker website](https://www.docker.com/).

### 2. **Create Your Microservices**
- **Initialize a Node.js Project**: For each microservice, create a new directory and initialize a Node.js project.
  ```bash
  mkdir service-name
  cd service-name
  npm init -y
  ```
- **Write Your Microservice Code**: Create a simple Express server for each microservice.
  ```javascript
  const express = require('express');
  const app = express();
  const port = process.env.PORT || 3000;

  app.get('/', (req, res) => res.send('Hello from service-name!'));

  app.listen(port, () => console.log(`Service running on port ${port}`));
  ```

### 3. **Dockerize Each Microservice**
- **Create a Dockerfile**: In each microservice directory, create a `Dockerfile`.
  ```dockerfile
  FROM node:14
  WORKDIR /app
  COPY package*.json ./
  RUN npm install
  COPY . .
  EXPOSE 3000
  CMD ["node", "index.js"]
  ```

### 4. **Set Up Docker Compose**
- **Create a `docker-compose.yml` File**: In the root directory of your project, create a `docker-compose.yml` file to define and run multi-container Docker applications.
  ```yaml
  version: '3'
  services:
    service1:
      build: ./service1
      ports:
        - "3001:3000"
    service2:
      build: ./service2
      ports:
        - "3002:3000"
    service3:
      build: ./service3
      ports:
        - "3003:3000"
  ```

### 5. **Run Your Microservices**
- **Start Docker Compose**: Run the following command in your terminal.
  ```bash
  docker-compose up
  ```

### 6. **Communicate Between Microservices**
- **Use HTTP Requests**: Microservices can communicate with each other using HTTP requests. For example, `service1` can make a request to `service2` using its Docker Compose service name.
  ```javascript
  const axios = require('axios');

  axios.get('http://service2:3000/')
    .then(response => console.log(response.data))
    .catch(error => console.error(error));
  ```

This setup allows you to run multiple Node.js microservices in Docker containers and have them communicate with each other. For more detailed guidance, you can refer to tutorials like [this one](https://clouddevs.com/node/microservices-with-docker/) or watch video tutorials such as [this one](https://www.youtube.com/watch?v=9sAg7RooEDc)¹².

If you have any specific questions or need further assistance, feel free to ask!

Source: Conversation with Copilot, 17/9/2024
(1) Step by Step Basic Microservices System (3 NodeJS + 1 Load Balancer containers) with Docker Compose. https://www.youtube.com/watch?v=9sAg7RooEDc.
(2) How to use Node.js Microservices - Ultimate Communication Guide. https://www.youtube.com/watch?v=T-xCylkjSf8.
(3) Node JS Microservices Course Overview #01 #microservices #nodejs. https://www.youtube.com/watch?v=UxoklNY7L30.
(4) Building Microservices with Node.js and Docker - CloudDevs. https://clouddevs.com/node/microservices-with-docker/.
(5) How to Build & Deploy Scalable Microservices with NodeJS, TypeScript .... https://dev.to/abeinevincent/how-to-build-deploy-scalable-microservices-with-nodejs-typescript-and-docker-a-comprehesive-guide-2bcc.
(6) Developing Microservices - Node, React, and Docker. https://mherman.org/blog/developing-microservices-node-react-docker/.
(7) Setting Up Microservices with React, Node.js using Docker - InfiniteJS. https://infinitejs.com/posts/setting-up-microservices-react-nodejs-docker/.
(8) undefined. https://github.com/hnasr/javascript_playground/tree/master/microservices-example.
(9) undefined. https://nodejs.org/%29.
(10) undefined. https://www.docker.com/%29.